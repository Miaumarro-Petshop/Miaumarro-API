// <auto-generated />
using System;
using MiauDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MiauDatabase.Migrations
{
    [DbContext(typeof(MiauDbContext))]
    partial class MiauDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("MiauDatabase.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("cep");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT")
                        .HasColumnName("complement");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("Destinatary")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT")
                        .HasColumnName("destinatary");

                    b.Property<int>("FkUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_user_id");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("neighborhood");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER")
                        .HasColumnName("number");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("reference");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("FkUserId")
                        .HasDatabaseName("ix_addresses_fk_user_id");

                    b.ToTable("addresses", (string)null);

                    b.HasComment("Represents an address.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.AppointmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<int>("FkPetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_pet_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("scheduled_time");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_appointments");

                    b.HasIndex("FkPetId")
                        .HasDatabaseName("ix_appointments_fk_pet_id");

                    b.ToTable("appointments", (string)null);

                    b.HasComment("Represents an appointment.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Breed")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("breed");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("FkUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_user_id");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gender");

                    b.Property<string>("ImageFileUrl")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("image_file_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("FkUserId")
                        .HasDatabaseName("ix_pets_fk_user_id");

                    b.ToTable("pets", (string)null);

                    b.HasComment("Represents a pet.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("amount");

                    b.Property<string>("Brand")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("brand");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.Property<int>("Tags")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);

                    b.HasComment("Represents a store product.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.ProductImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_url");

                    b.Property<int>("FkProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_product_id");

                    b.HasKey("Id")
                        .HasName("pk_product_images");

                    b.HasIndex("FkProductId")
                        .HasDatabaseName("ix_product_images_fk_product_id");

                    b.ToTable("product_images", (string)null);

                    b.HasComment("Represents a product image.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.ProductReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("FkProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_product_id");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_user_id");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_product_reviews");

                    b.HasIndex("FkProductId")
                        .HasDatabaseName("ix_product_reviews_fk_product_id");

                    b.HasIndex("FkUserId")
                        .HasDatabaseName("ix_product_reviews_fk_user_id");

                    b.ToTable("product_reviews", (string)null);

                    b.HasComment("Represents a product image.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PurchasedProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<int>("FkProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_product_id");

                    b.Property<int>("FkPurchaseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_purchase_id");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("sale_price");

                    b.HasKey("Id")
                        .HasName("pk_purchased_products");

                    b.HasIndex("FkProductId")
                        .HasDatabaseName("ix_purchased_products_fk_product_id");

                    b.HasIndex("FkPurchaseId")
                        .HasDatabaseName("ix_purchased_products_fk_purchase_id");

                    b.ToTable("purchased_products", (string)null);

                    b.HasComment("Represents a purchased product.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PurchaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Coupon")
                        .HasColumnType("TEXT")
                        .HasColumnName("coupon");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<int>("FkUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_user_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_purchases");

                    b.HasIndex("FkUserId")
                        .HasDatabaseName("ix_purchases_fk_user_id");

                    b.ToTable("purchases", (string)null);

                    b.HasComment("Represents a purchase.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER")
                        .HasColumnName("permissions");

                    b.Property<string>("Phone")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("salt");

                    b.Property<string>("SaltedPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("salted_password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasComment("Represents a user.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.WishlistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<int>("FkProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_product_id");

                    b.Property<int>("FkUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fk_user_id");

                    b.HasKey("Id")
                        .HasName("pk_wishlist");

                    b.HasIndex("FkProductId")
                        .HasDatabaseName("ix_wishlist_fk_product_id");

                    b.HasIndex("FkUserId")
                        .HasDatabaseName("ix_wishlist_fk_user_id");

                    b.ToTable("wishlist", (string)null);

                    b.HasComment("Represents a wishlist item.");
                });

            modelBuilder.Entity("MiauDatabase.Entities.AddressEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.UserEntity", "FkUser")
                        .WithMany("AddressesRel")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_users_fk_user_id");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("MiauDatabase.Entities.AppointmentEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.PetEntity", "FkPet")
                        .WithMany("AppointmentsRel")
                        .HasForeignKey("FkPetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_pets_fk_pet_id");

                    b.Navigation("FkPet");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PetEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.UserEntity", "FkUser")
                        .WithMany("PetsRel")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pets_users_fk_user_id");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("MiauDatabase.Entities.ProductImageEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.ProductEntity", "FkProduct")
                        .WithMany("ProductImagesRel")
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_images_products_fk_product_id");

                    b.Navigation("FkProduct");
                });

            modelBuilder.Entity("MiauDatabase.Entities.ProductReviewEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.ProductEntity", "FkProduct")
                        .WithMany("ProductReviewsRel")
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_reviews_products_fk_product_id");

                    b.HasOne("MiauDatabase.Entities.UserEntity", "FkUser")
                        .WithMany("ProductReviewsRel")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("fk_product_reviews_users_fk_user_id");

                    b.Navigation("FkProduct");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PurchasedProductEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.ProductEntity", "FkProduct")
                        .WithMany("PurchasedProductsRel")
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchased_products_products_fk_product_id");

                    b.HasOne("MiauDatabase.Entities.PurchaseEntity", "FkPurchase")
                        .WithMany("PurchasedProductRel")
                        .HasForeignKey("FkPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchased_products_purchases_fk_purchase_id");

                    b.Navigation("FkProduct");

                    b.Navigation("FkPurchase");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PurchaseEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.UserEntity", "FkUser")
                        .WithMany("PurchasesRel")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchases_users_fk_user_id");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("MiauDatabase.Entities.WishlistEntity", b =>
                {
                    b.HasOne("MiauDatabase.Entities.ProductEntity", "FkProduct")
                        .WithMany("WishlistRel")
                        .HasForeignKey("FkProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wishlist_products_fk_product_id");

                    b.HasOne("MiauDatabase.Entities.UserEntity", "FkUser")
                        .WithMany("WishlistRel")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wishlist_users_fk_user_id");

                    b.Navigation("FkProduct");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PetEntity", b =>
                {
                    b.Navigation("AppointmentsRel");
                });

            modelBuilder.Entity("MiauDatabase.Entities.ProductEntity", b =>
                {
                    b.Navigation("ProductImagesRel");

                    b.Navigation("ProductReviewsRel");

                    b.Navigation("PurchasedProductsRel");

                    b.Navigation("WishlistRel");
                });

            modelBuilder.Entity("MiauDatabase.Entities.PurchaseEntity", b =>
                {
                    b.Navigation("PurchasedProductRel");
                });

            modelBuilder.Entity("MiauDatabase.Entities.UserEntity", b =>
                {
                    b.Navigation("AddressesRel");

                    b.Navigation("PetsRel");

                    b.Navigation("ProductReviewsRel");

                    b.Navigation("PurchasesRel");

                    b.Navigation("WishlistRel");
                });
#pragma warning restore 612, 618
        }
    }
}
